JJavaScript Whiteboard#5
   
 Maximum Subarray 
 
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
 
Are all array elements positive? ( sum all elements )
Is all array elements negative? Contains 0 or not?


But if it contains both negative and positive?

Example:
Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

(Dynamic Programming)



*writes down "1+1+1+1+1+1+1+1+1 =" on a sheet of paper*
"What's that equal to?"
*counting* "Eight!"
*writes down another "1+" on the left*
"What about that?"
*quickly* "Nine!"
"How'd you know it was nine so fast?"
"You just added one more"
"So you didn't need to recount because you remembered there were eight! Dynamic Programming is just a fancy way to say:

“remembering stuff to save time later”

using the same concept above:

Input: [-2,1,-3,4,-1,2,1,-5,4]



local_maximum at index  i is the maximum of A[i] and the sum of A[i] and local_maximum at index i-1.


Kadane’s Algorithm

at every index i, the problem boils down to finding the maximum of just two numbers, A[i] and (A[i] + local_maximum[i-1]). Thus the maximum subarray problem can be solved by solving these sub-problems of finding local_maximums recursively.


Input: [-2,1,-3,4,-1,2,1,-5,4]


Const maxSubArray = ( nums )=>{

   Let local_sum = nums[0];
   Let global_sum = nums[0];
for(let i=0;i<nums.length;i++){

Local_sum = Math.max(nums[i], local_sum + num[i]);

  if(local_sum > global_sum){
       global_sum = local_sum;
   }
}
return global_sum
}





----- Description:

local_sum = Math.max(nums[i], local_sum + nums[i]);        
if(local_sum > global_sum){
  global_sum = local_sum;
 }

Input: [-2,1,-3,4,-1,2,1,-5,4]

//i=1, local_sum = max(1, -2 + 1 = -1)-> 1
//i=2, local_sum = max(-3,1+ -3 = -2)-> -2
//i=3, local_sum = max(4, -2 + 4 = 2)-> 4
//i=4, local_sum = max(-1, 4 + -1 = 3)-> 3
//i=5, local_sum = max(2,3+2 = 5)-> 5
//i=6, local_sum = max(1,5+1 = 6)-> 6 
//i=7, local_sum = max(-5,6+-5 = 1)-> 1
//i=8, local_sum = max(4,1+4 = 5)-> 5





 The time complexity of is O(n).



Thank you :)






Recommended Resource:

https://medium.com/@rsinghal757/kadanes-algorithm-dynamic-programming-how-and-why-does-it-work-3fd8849ed73d



