Cousins in Binary Tree


n a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.


Cousines: nodes in the tree at the same level, different parents.





Solution description:

Make a hashmap.
Traverse and when we reach a node with value X or value Y , we will set the level and parent for them inside the hashmap.
Comparison if level is the same and parent is different? 



/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} x
 * @param {number} y
 * @return {boolean}
 */
const isCousins = function(root, x, y) {
  
    let hash = new Map();
    let traverse = (node,level,parent)=>{
        
        if(node === null){
            return;
        }
        if(node.val === x || node.val === y){
            hash.set(node.val,{level,parent})
        }
        traverse(node.left,level+1,node);
        traverse(node.right,level+1,node);
        
    }
    
    traverse(root,0,new TreeNode(-1));
    return hash.get(x).level === hash.get(y).level && hash.get(x).parent !== hash.get(y).parent;
    
};
