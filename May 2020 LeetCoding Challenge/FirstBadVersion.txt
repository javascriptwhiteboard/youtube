First Bad Version

You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.
Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.
You are given an API bool isBadVersion(version) which will return whether the version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.
Example:
Given n = 5, and version = 4 is the first bad version.

call isBadVersion(3) -> false
call isBadVersion(5) -> true
call isBadVersion(4) -> true

Then 4 is the first bad version

suppose I have this dataset

1,2,3,4,5,6,7,8
         How could I find my first bad version?

One of the ways to do that is using 
Binary search approach




If my mid point is not a bad version ?

5,6,7,8

This means that all my left side is not a bad version, I will bring my left to start from my mid+1.


If my mid point is a bad version ?

5,6.

if my midpoint is a bad version so that my first bad will be somewhere on the left side, so I will assign my right to be my middle -1 until I find it.


var solution = function(isBadVersion) {

  
   return function(n){

        Let left = 0;
        Let right = n;
        Let result = -1;
        while( left <= right){
          Let mid = Math.floor(left + (right - left ) /2);
   if(!isBadVersion(mid)){
          Left = mid +1;
     }else{
         Right = mid -1;
         result = mid;
    }

   }
  Return result;

   }

}
